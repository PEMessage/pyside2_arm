# This is a basic workflow to help you get started with Actions

name: pyrealsense_arm64_build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  schedule:
    - cron: "0 0 * * TUE"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: arm64-pyrealsense-build
  cancel-in-progress: true

jobs:
  armv7_job:
    # The host should always be Linux
    runs-on: self-hosted
    name: Build on ubuntu-18.04 aarch64
    steps:
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          install: |
            apt update -q -y
            apt-get install -q -y build-essential cmake python3 git libclang-dev qt5-default qtscript5-dev libssl-dev qttools5-dev qttools5-dev-tools qtmultimedia5-dev libqt5svg5-dev libqt5webkit5-dev libsdl2-dev libasound2 libxmu-dev libxi-dev freeglut3-dev libasound2-dev libjack-jackd2-dev libxrandr-dev libqt5xmlpatterns5-dev libqt5xmlpatterns5 libqt5xmlpatterns5-dev qtdeclarative5-private-dev qtbase5-private-dev qttools5-private-dev qtwebengine5-private-dev libclang-9-dev gcc libpq-dev python3-dev python3-pip python3-venv python3-wheel git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev tar -y
            pip3 install wheel

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            apt-get install sudo -y
            cd ~
            # First clone the repository
            git clone https://github.com/IntelRealSense/librealsense.git
            cd librealsense
            
            # Make sure that your RealSense cameras are disconnected at this point
            # Run the Intel Realsense permissions script
            ./scripts/setup_udev_rules.sh
            sed --in-place=.BACKUP 's/\(BUILD_TESTING[A-Z_]*\) ON/\1 OFF/' CMakeLists.txt
            printf "\nset(CPACK_PACKAGE_CONTACT \"orensbruli@gmail.com\")\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"Esteban Martinena\")\ninclude(CPack)\n" >> CMakeLists.txt
            # Now the build
            mkdir build && cd build
            ## Install CMake with Python bindings (that's what the -DBUILD flag is for)
            ## see link: https://github.com/IntelRealSense/librealsense/tree/master/wrappers/python#building-from-source
            cmake ../ -DBUILD_PYTHON_BINDINGS:bool=true -DBUILD_UNIT_TESTS=false
            ## Recompile and install librealsense binaries
            ## This is gonna take a while! The -j4 flag means to use 4 cores in parallel
            ## but you can remove it and simply run `sudo make` instead, which will take longer
            make uninstall && make clean && make -j14 && make install
            cpack -G DEB || true
            rm -r /artifacts/* || true
            cp *so *.deb /artifacts/ || true
      - uses: actions/upload-artifact@v3
        with:
          name: pyrealsense-arm64
          path: artifacts/*
